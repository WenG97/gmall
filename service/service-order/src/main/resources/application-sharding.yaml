spring:
  shardingsphere:
    props:
      sql-show: true

    #    先让sharding 管理六个数据源

    datasource:
      names: order_0_m,order_0_s1,order_0_s2,order_1_m,order_1_s1,order_1_s2

      #      order 0主库
      order_0_m:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
        url: jdbc:mysql://192.168.41.101:3306/gmall_order_0?useSSL=false&characterEncoding=utf-8&serverTimezone=Asia/Shanghai

      order_0_s1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
        url: jdbc:mysql://192.168.41.101:3307/gmall_order_0?useSSL=false&characterEncoding=utf-8&serverTimezone=Asia/Shanghai

      order_0_s2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
        url: jdbc:mysql://192.168.41.101:3308/gmall_order_0?useSSL=false&characterEncoding=utf-8&serverTimezone=Asia/Shanghai

      #       order1的主库
      order_1_m:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
        url: jdbc:mysql://192.168.41.101:3306/gmall_order_1?useSSL=false&characterEncoding=utf-8&serverTimezone=Asia/Shanghai

      order_1_s1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
        url: jdbc:mysql://192.168.41.101:3307/gmall_order_1?useSSL=false&characterEncoding=utf-8&serverTimezone=Asia/Shanghai

      order_1_s2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
        url: jdbc:mysql://192.168.41.101:3308/gmall_order_1?useSSL=false&characterEncoding=utf-8&serverTimezone=Asia/Shanghai

    rules:
      #      读写分离配置
      readwrite-splitting:
        data-sources:
          order0ds: #逻辑数据源
            type: Static
            props:
              write-data-source-name: order_0_m
              read-data-source-names: order_0_s1,order_0_s2
            load-balancer-name: round

          order1ds: #逻辑数据源
            type: Static
            props:
              write-data-source-name: order_1_m
              read-data-source-names: order_1_s1,order_1_s2
            load-balancer-name: round

        load-balancers:
          round:
            type: ROUND_ROBIN

      #分库分表配置
      sharding:
        #默认的分库策略
        default-database-strategy:
          standard: #分片键是单列 就是标准模式
            #分片键
            sharding-column: user_id
            #分片算法
            sharding-algorithm-name: user_id_mod2
        #指定具有绑定关系的表
        #不说绑定关系，会分别计算查哪个库的哪个表
        binding-tables:
          - order_info,order_detail
          - order_info,order_status_log

        #定义分表规则:定义每个逻辑表是怎么对应真实表的,$->{} 动态取值
        tables:
          order_info:
            #真实库.真实表
            actual-data-nodes: order$->{0..1}ds.order_info_$->{0..2}
            table-strategy:
              standard:
                #分片键
                sharding-column: user_id
                #分片算法
                sharding-algorithm-name: user_id_mod3_oi
            key-generate-strategy:
              column: id
              key-generate-strategy: snow

          order_detail:
            #真实库.真实表
            actual-data-nodes: order$->{0..1}ds.order_detail_$->{0..2}
            table-strategy:
              standard:
                #分片键
                sharding-column: user_id
                #分片算法
                sharding-algorithm-name: user_id_mod3_od
            key-generate-strategy:
              column: id
              key-generate-strategy: snow

          order_status_log:
            #真实库.真实表
            actual-data-nodes: order$->{0..1}ds.order_status_log_$->{0..2}
            table-strategy:
              standard:
                #分片键
                sharding-column: user_id
                #分片算法
                sharding-algorithm-name: user_id_mod3_osl
            key-generate-strategy:
              column: id
              key-generate-strategy: snow

          payment_info:
            #真实库.真实表
            actual-data-nodes: order$->{0..1}ds.payment_info_$->{0..2}
            table-strategy:
              standard:
                #分片键
                sharding-column: user_id
                #分片算法
                sharding-algorithm-name: user_id_mod3_pi
            key-generate-strategy:
              column: id
              key-generate-strategy: snow

        #指定分片算法详细信息
        sharding-algorithms:
          #指定每一种算法
          user_id_mod2:
            type: INLINE
            props:
              algorithm-expression: order$->{user_id % 2}ds

          #定义表的表达式的算法
          user_id_mod3_oi:
            type: INLINE
            props:
              algorithm-expression: order_info_$->{user_id % 3}

          user_id_mod3_od:
            type: INLINE
            props:
              algorithm-expression: order_detail_$->{user_id % 3}

          user_id_mod3_osl:
            type: INLINE
            props:
              algorithm-expression: order_status_log_$->{user_id % 3}

          user_id_mod3_pi:
            type: INLINE
            props:
              algorithm-expression: payment_info_$->{user_id % 3}
        key-generators:
          snow:
            type: SNOWFLAKE
            props:
              work-id: $->{random.int(1000))}
